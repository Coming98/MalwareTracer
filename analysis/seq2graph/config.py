import os
import argparse
import logging
import sys

class Config:

    def __init__(self):
        # self.init_params()

        self.init_api2cat()

        self.output_dir = "./analysis/seq2graph/outputs"
        self._dirs = [self.output_dir, ]
        for dir_name in self._dirs:
            if(not os.path.exists(dir_name)):
                os.makedirs(dir_name)

    def init_api2cat(self, ):

        self.acceptFileTypes = ['DLL', 'CONFIG']

        self.cat2apis = {
            "IPC_out_pid": ["WriteProcessMemory", "NtProtectVirtualMemory", "NtWriteVirtualMemory", ],
            "IPC_in_pid": ["NtReadVirtualMemory", ],
            "IPC_in_Handle": ["ReadProcessMemory", ],

            "Create_out_File": ["NtOpenFile", "NtCreateFile", ],
            "Read_in_File": ["NtReadFile", "NtQueryAttributesFile", ],
            "Write_out_File": ["NtWriteFile", "Fake_WritePEFile", ],
            "ReadWrite_inout_2way": ["CopyFileExW", ],
            "Delete_out_File": ["DeleteFileW", ],

            "Fork_out_pid": ["CreateProcessInternalW", ],

            "ReadReg_in_Registry": ["NtQueryValueKey", "NtEnumerateValueKey", "NtEnumerateKey", "NtOpenKey", "NtOpenKeyEx", ],
            "SetReg_out_Registry": ["NtSetValueKey", "NtDeleteKey", "NtDeleteValueKey", ],


            "LoadLibrary_in_DLL": ["LdrGetDllHandle", "LdrLoadDll", "LoadLibraryExW", ],

            "Execute_in_Cname": ["Fake_BeCreatedEx", ],

            "Kill_out_pid": ["NtTerminateProcess", "Fake_TerminateRemoteProcess", ],


        }
        self.api2cat = {}
        for cat_direction_target, apis in self.cat2apis.items():
            for api in apis:
                if (api not in self.api2cat): self.api2cat[api] = {"cat": "", "dir": "", "target": ""} # dir in ["out", "in"]
                else: raise ValueError(f"Same API: {api}")

                cat, direction, target = cat_direction_target.split('_')
                self.api2cat[api] = {"cat": cat, "dir": direction, "target": target}

    def init_params(self, ):
        parser = argparse.ArgumentParser(description="Config Infos")
                            
        # parser.add_argument("-d", "--data-count", dest="data_count",
        #                     default=1000, type=int, 
        #                     help="The sample data count(-1 means all data)")

        # parser.add_argument("-s", "--shuffle-flag", dest="shuffle_flag",
        #                     action="store_true", default=False,
        #                     help="Whether to shuffle the sample data")
                            
        self.args = parser.parse_args()