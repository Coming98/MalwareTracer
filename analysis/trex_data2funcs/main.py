#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File         :   main.py
@Time         :   2022/09/29 23:00:56
@Author       :   JC
@Contact      :   jcqueue@gmail.com
@Department   :   INSTITUTE OF INFORMATION ENGINEERING, CAS
@Desc         :   对 Trex Data 进行分析将目标二进制程序反汇编, 获取其函数列表
'''
from hashlib import md5
import os

import utils
from config import Config
from itertools import product
from capstone import *
from capstone.x86 import *

md = Cs(CS_ARCH_X86, CS_MODE_64)

CONFIG = Config()


def main():
    for target_arch, target_mode in product(CONFIG.target_archs, CONFIG.target_modes):
        arch_mode_dir = CONFIG.data_dir + f'{target_arch}-{target_mode}/'

        # 1. 获取要分析的目标软件文件夹信息集合
        target_software_dirs = []
        for target_software_name in os.listdir(arch_mode_dir):
            # 如果目标软件不再目标分析软件集合中 - 过滤
            if(not any([item in target_software_name for item in CONFIG.target_softwares])): continue
            # 如果不考虑混淆 - 过滤
            # 如果优化级别不再目标优化级别集合中 - 过滤
            if(CONFIG.obfuscation_flag == False and target_software_name.split('-')[-1] not in CONFIG.target_opts): continue
            target_software_dirs.append((arch_mode_dir + f'{target_software_name}/', target_software_name))

        # 2. 针对 每个目标软件>软件中的每个二进制工具 进行反汇编处理        
        for target_software_dir, target_software_name in target_software_dirs: # 目标软件
            target_tool_paths = [(target_software_dir + f'{target_tool_name}', target_tool_name) for target_tool_name in os.listdir(target_software_dir)]
            for target_tool_path, target_tool_name in target_tool_paths: # 目标工具
                output_dir = CONFIG.output_dir + f'{target_arch}-{target_mode}/{target_software_name}/{target_tool_name}.json'
                with open(target_tool_path, 'rb') as f:
                    opcode = f.read()
                BaseAddr = 401000
                for item in md.disasm(opcode, 0):
                    addr = int(BaseAddr) + item.address
                    dic = {"Addr": str(addr) , "OpCode": item.mnemonic + " " + item.op_str}
                    print(dic)

if __name__ == '__main__':
    main()